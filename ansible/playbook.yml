---
- hosts: playground

  vars:
    PLAYGROUND_USER: "{{ lookup('env', 'USER') }}"
    VM_ADDRESS: "{{ groups['playground'][0] }}"
    REPO_NAME: playground

  tasks:
    #
    # Add user
    #
    - name: useradd {{ PLAYGROUND_USER }}
      user: name={{ PLAYGROUND_USER }} groups=sudo append=yes shell=/bin/bash

    - name: Make sudo not require a password
      lineinfile: dest=/etc/sudoers state=present regexp='^%sudo ALL\=' line='%sudo ALL=(ALL) NOPASSWD:ALL' validate='visudo -cf %s'

    - name: Ensure public key is in authorized_keys
      authorized_key:
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
        user: "{{ PLAYGROUND_USER }}"

    #
    # Apt
    #
    - name: apt-get update
      apt: update_cache=yes
      # apt cache updates actually aren't all that meaningful, so ignore them in terms of change reporting
      changed_when: false

    - name: apt-get install apt https support
      apt: name={{ item }}
      with_items:
        - apt-transport-https
        - ca-certificates

    #
    # Required system dependencies for this playbook
    #
    - name: install dev dependencies
      apt: name={{ item }}
      with_items:
        - python-dev
        - python-setuptools
        - git
        - unattended-upgrades

    - name: Read uname
      command: uname -r
      register: uname_output
      changed_when: False

    - name: apply security upgrades
      command: unattended-upgrades --verbose
      register: security_upgrades

    - name: apt-get install linux-image-extra-*
      apt: name={{ item }}
      register: image_extras
      with_items:
        - linux-image-extra-{{ uname_output.stdout }}
        - linux-image-extra-virtual

    - name: set reboot requested after installing linux-image-extra-*
      set_fact:
        reboot_requested: True
      when: image_extras.changed or security_upgrades.changed

    - name: easy_install pip
      easy_install: name=pip

    #
    # Setup Git server
    #
    - name: add git user
      user: name=git

    - name: create .ssh directory for git user
      file: path=/home/git/.ssh owner=git group=git mode=0700 state=directory

    - name: allow {{ PLAYGROUND_USER }} to access git server via ssh
      copy:
        src: ~/.ssh/id_rsa.pub
        dest: /home/git/.ssh/authorized_keys
        mode: 0600
        owner: git
        group: git

    - name: create directory for git repository
      file: path=/opt/git/{{ REPO_NAME }}.git owner=git group=git state=directory

    - name: create bare git repository
      become_user: git
      command: git init --bare /opt/git/{{ REPO_NAME }}.git
      args:
        creates: /opt/git/{{ REPO_NAME }}.git/HEAD
        warn: no

    #
    # Setup journald
    #
    - name: mkdir -p /etc/systemd/journald.conf.d
      file: path=/etc/systemd/journald.conf.d state=directory mode=0755

    - name: Configure journald to persist logs to disk
      copy:
        src: configs/custom.conf
        dest: /etc/systemd/journald.conf.d/
      notify: restart journald

    #
    # Setup Docker
    #
    - name: install Docker apt-key
      apt_key:
        id: 58118E89F3A912897C070ADBF76221572C52609D
        keyserver: hkp://p80.pool.sks-keyservers.net:80

    - name: install Docker apt repo
      apt_repository:
        repo: deb https://apt.dockerproject.org/repo ubuntu-xenial main

    - name: install Docker
      apt: name=docker-engine=1.12*

    - name: start Docker
      service: name=docker state=started

    - name: add users to docker group
      user: name={{ item }} groups=docker append=yes
      with_items:
        - '{{ PLAYGROUND_USER }}'
        - vagrant

    - name: install Docker python modules for Ansible
      pip: name=docker-py version=1.10.6

    - name: Create Docker daemon.json configuration file
      copy: src=configs/daemon.json dest=/etc/docker/daemon.json
      notify: restart docker

    - name: enable memory cgroup and swap accounting for Docker
      replace:
        dest: /etc/default/grub
        regexp: (GRUB_CMDLINE_LINUX=").*(")
        replace: \1cgroup_enable=memory swapaccount=1\2
      register: grub_conf

    - name: update grub2 when grub config changed
      command: update-grub2
      when: grub_conf.changed

    - name: set reboot requested if grub config changed
      set_fact:
        reboot_requested: True
      when: grub_conf.changed

    #
    # Setup docker-gc
    #
    - name: download docker-gc
      tags: docker-gc
      get_url:
        url: https://raw.githubusercontent.com/spotify/docker-gc/71d2a57d062902595834e2918a008cebedaff18f/docker-gc
        dest: /usr/local/sbin/docker-gc
        mode: 0755
        checksum: sha256:98ea7fa6630aa2e31d5da58033b07cf09cdbd94b0847c167631e346c1fbc2586

    - name: install docker-gc in crontab to run every two hours
      tags: docker-gc
      cron:
        name: docker-gc
        minute: 0
        hour: '*/2'
        job: GRACE_PERIOD_SECONDS=7200 FORCE_IMAGE_REMOVAL=1 FORCE_CONTAINER_REMOVAL=1 /usr/local/sbin/docker-gc >> /var/log/docker-gc.log
        user: root

    - name: setup docker-gc logrotation
      tags: docker-gc
      copy: src=configs/logrotate.conf dest=/etc/logrotate.d/docker-gc.conf

    #
    # Setup cAdvisor
    #
    - name: launch cadvisor container
      docker_container:
        name: cadvisor
        image: google/cadvisor:v0.28.3
        restart_policy: always
        state: started
        memory: '256MB'
        published_ports:
          - 8080:8080
        volumes:
          - /:/rootfs:ro
          - /var/run:/var/run:rw
          - /sys:/sys:ro
          - /var/lib/docker/:/var/lib/docker:ro

    #
    # Reboot if needed
    #
    - name: Look for reasons to reboot
      shell: "test -e /var/run/reboot-required || grep -q '/lib[0-9]*/.* (deleted)$' /proc/*/maps && echo REBOOT"
      register: reboot_required
      failed_when: False
      changed_when: reboot_requested is defined or reboot_required.stdout == 'REBOOT'

    # Reboot; see https://support.ansible.com/hc/en-us/articles/201958037-Reboot-a-server-and-wait-for-it-to-come-back
    # esp. the comments
    - name: reboot
      # sleep gives async task time to kick off
      shell: 'sleep 2 && shutdown -r now "ansible: reboot-required detected; restarting"'
      async: 5
      # poll 0 means "fire and forget"
      poll: 0
      register: reboot
      when: not reboot_required|skipped() and reboot_required.changed

    - name: wait for restart
      local_action: wait_for
        host={{ inventory_hostname }}
        port=22
        delay=15
        timeout=300
      become: no
      when: not reboot|skipped

    #
    # Clone applications
    #
    - name: push source to remote
      become: false
      local_action: >
        command warn="no" git push --force
          --repo git@{{ VM_ADDRESS }}:/opt/git/{{ REPO_NAME }}.git
      tags: deploy

    - name: pull source into working directory
      git:
        repo: /opt/git/{{ REPO_NAME }}.git/
        dest: /usr/src/{{ REPO_NAME }}/
      tags: deploy

    #
    # Setup Asterisk
    #
    - name: build Asterisk Docker image
      docker_image:
        name: asterisk
        path: /usr/src/{{ REPO_NAME }}/asterisk
        state: present
        force: yes
      tags: deploy

    - name: start Asterisk Docker container
      docker_container:
        name: asterisk
        image: asterisk
        state: started
        restart: yes
        restart_policy: always
        network_mode: host
      tags: deploy


    #
    # Setup swagger-ui
    #
    - name: build swagger-ui Docker image
      docker_image:
        name: swagger-ui
        path: /usr/src/{{ REPO_NAME }}/swagger-ui
        state: present
        force: yes
      tags: deploy

    - name: start swagger-ui Docker container
      docker_container:
        name: swagger-ui
        image: swagger-ui
        state: started
        restart: yes
        restart_policy: always
        published_ports:
          - 1337:80
        env:
          SWAGGER_URL: http://{{ inventory_hostname }}:8088/ari/api-docs/resources.json
          ARI_USERNAME: asterisk
          ARI_PASSWORD: asterisk
      tags: deploy

    #
    # Setup call-control
    #
    - name: build call-control Docker image
      docker_image:
        name: call-control
        path: /usr/src/{{ REPO_NAME }}/call-control
        state: present
        force: yes
      tags: deploy

    - name: start call-control Docker container
      docker_container:
        name: call-control
        image: call-control
        state: started
        restart: yes
        restart_policy: always
        network_mode: host
        env:
          NODE_ENV: production
          DEBUG: '*'
      tags: deploy

  handlers:
    - name: restart cAdvisor
      service: name=cadvisor state=restarted

    - name: restart docker
      service: name=docker state=restarted

    - name: restart journald
      service: name=systemd-journald state=restarted
