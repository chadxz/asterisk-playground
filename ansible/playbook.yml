---
- hosts: playground

  #-*-* vars *-*-#
  vars:
    PLAYGROUND_USER: "{{ lookup('env', 'USER') }}"
    VM_ADDRESS: "{{ groups['playground'][0] }}"
    REPO_NAME: playground

  #-*-* tasks *-*-#
  tasks:
    ### add user
    - name: useradd {{ PLAYGROUND_USER }}
      user: name={{ PLAYGROUND_USER }} groups=sudo append=yes shell=/bin/bash

    - name: Ensure public key is in authorized_keys
      authorized_key:
        key: "{{ lookup('file', lookup('env','HOME') + '/.ssh/id_rsa.pub') }}"
        user: "{{ PLAYGROUND_USER }}"

    ### apt
    - name: install apt upgrades
      apt: name={{ item }} update_cache=yes
      with_items:
        - apt-transport-https
        - ca-certificates

    ### dependencies
    - name: install dev dependencies
      apt: name={{ item }} update_cache=yes
      with_items:
        - python-dev
        - python-setuptools
        - git

    - name: easy_install pip
      easy_install: name=pip

    ## setup git server
    - name: add git user
      user: name=git

    - name: create .ssh directory for git user
      file: path=/home/git/.ssh owner=git group=git mode=0700 state=directory

    - name: allow {{ PLAYGROUND_USER }} to access git server via ssh
      copy:
        src: ~/.ssh/id_rsa.pub
        dest: /home/git/.ssh/authorized_keys
        mode: 0600
        owner: git
        group: git

    - name: create directory for git repository
      file: path=/opt/git/{{ REPO_NAME }}.git owner=git group=git state=directory

    - name: create bare git repository
      become_user: git
      command: git init --bare /opt/git/{{ REPO_NAME }}.git
      args:
        creates: /opt/git/{{ REPO_NAME }}.git/HEAD
        warn: no

    ### docker
    - name: install Docker apt-key
      apt_key:
        id: 58118E89F3A912897C070ADBF76221572C52609D
        keyserver: hkp://p80.pool.sks-keyservers.net:80

    - name: install Docker apt repo
      apt_repository:
        repo: deb https://apt.dockerproject.org/repo ubuntu-xenial main

    - name: install Docker
      apt: name=docker-engine=1.12* update_cache=yes

    - name: start Docker
      service: name=docker state=started

    - name: add users to docker group
      user: name={{ PLAYGROUND_USER }} groups=docker append=yes

    # explicitly specify 1.9.0 to work around ansible issue
    # https://github.com/ansible/ansible/issues/17495
    - name: install Docker python modules for Ansible
      pip: name=docker-py version=1.9.0

    - name: enable memory cgroup and swap accounting for Docker
      replace:
        dest: /etc/default/grub
        regexp: (GRUB_CMDLINE_LINUX=").*(")
        replace: \1cgroup_enable=memory swapaccount=1\2
      register: grub_conf

    - name: update grub2 when grub config changed
      command: update-grub2
      when: grub_conf.changed

    - name: restart machine if grub config changed
      command: sleep 2 && reboot
      async: 1
      poll: 0
      ignore_errors: true
      when: grub_conf.changed
      register: reboot

    - name: wait for machine to come back up
      local_action: wait_for host={{ inventory_hostname }} state=started
      become: false
      when: reboot.changed

    ### docker-gc
    - name: download docker-gc
      get_url:
        url: https://raw.githubusercontent.com/spotify/docker-gc/4ee60137cfc76cf568b47f9b459b851d59325311/docker-gc
        dest: /usr/sbin/docker-gc
        mode: 0755
        checksum: sha1:51847f2feadf2268ec3b66ed4a26e738db0815aa

    - name: install docker-gc in crontab to run every two hours
      cron: name=docker-gc minute=0 hour=*/2 job=/usr/sbin/docker-gc

    ### cAdvisor
    - name: download cAdvisor
      get_url:
        url: https://github.com/google/cadvisor/releases/download/v0.24.1/cadvisor
        dest: /usr/bin/cadvisor
        mode: 0755
        checksum: sha1:0cb5704ef3d37f1175c8a34aa69e3ae4416b032b
      notify: restart cAdvisor

    - name: install cAdvisor init.d script
      copy:
        src: configs/cadvisor.init.d
        dest: /etc/init.d/cadvisor
        mode: 0755
      notify: restart cAdvisor

    - name: install cAdvisor default parameters
      copy:
        src: configs/cadvisor.default
        dest: /etc/default/cadvisor
      notify: restart cAdvisor

    - name: install cAdvisor service
      copy:
        src: configs/cadvisor.service
        dest: /lib/systemd/system/cadvisor.service

    - name: start cAdvisor
      service: name=cadvisor state=started enabled=yes

    ### clone source
    - name: push source to remote
      become: false
      local_action: >
        command warn="no" git push
          --repo git@{{ VM_ADDRESS }}:/opt/git/{{ REPO_NAME }}.git
      tags: deploy

    - name: pull source into working directory
      git:
        repo: /opt/git/{{ REPO_NAME }}.git/
        dest: /usr/src/{{ REPO_NAME }}/
      tags: deploy

    ### asterisk
    - name: build Asterisk Docker image
      docker_image:
        name: asterisk
        path: /usr/src/{{ REPO_NAME }}/asterisk
        state: present
        force: yes
      tags: deploy

    - name: start Asterisk Docker container
      docker_container:
        name: asterisk
        image: asterisk
        state: started
        restart: yes
        restart_policy: always
        network_mode: host
      tags: deploy

    ### swagger-ui
    - name: build swagger-ui Docker image
      docker_image:
        name: swagger-ui
        path: /usr/src/{{ REPO_NAME }}/swagger-ui
        state: present
        force: yes
      tags: deploy

    - name: start swagger-ui Docker container
      docker_container:
        name: swagger-ui
        image: swagger-ui
        state: started
        restart: yes
        restart_policy: always
        ports:
          - 8080:8080
        env:
          SWAGGER_URL: http://{{ inventory_hostname }}:8088/ari/api-docs/resources.json
          ARI_USERNAME: asterisk
          ARI_PASSWORD: asterisk
      tags: deploy

    ### call-control
    - name: build call-control Docker image
      docker_image:
        name: call-control
        path: /usr/src/{{ REPO_NAME }}/call-control
        state: present
        force: yes
      tags: deploy

    - name: start call-control Docker container
      docker_container:
        name: call-control
        image: call-control
        state: started
        restart: yes
        restart_policy: always
        network_mode: host
        env:
          NODE_ENV: production
      tags: deploy

  handlers:
    - name: restart cAdvisor
      service: name=cadvisor state=restarted
